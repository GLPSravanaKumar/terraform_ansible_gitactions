name: Terraform Multi-Cloud

on:
  workflow_run:
    branches: [main,tf_multicloud]
    workflows: [tf_multicloud.yaml]
    types: 
      - completed
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform plan, apply, or destroy'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
#      cloud:
#        description: 'Choose the cloud provider'
#        required: true
#        default: 'aws'
#        type: choice
#        options:
#         - aws
#          - azure
      environment:
        description: 'Environment name (dev, stage, prod)'
        required: true
        default: 'dev'
env:
  TERRAFORM_DESTROY: "NO"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
  ARM_CLIENT_SECRET_ID: ${{secrets.ARM_CLIENT_SECRET_ID}}
  ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
  ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}
  ACTIONS_STEP_DEBUG: true
  PACKER_PRODUCT_VERSION: 1.8.5
  TERRAFORM_PRODUCT_VERSION: 1.7.3
  ENVIRONMENT: ${{ github.event.inputs.environment }}

jobs:
  tools_check:
    if: ${{ github.event.inputs.action == 'plan' }} # ðŸ‘ˆ This ensures it runs only when the action is 'plan'
    name: 'Checking Tools Status'
    runs-on: [self-hosted,terraform]
    defaults:
     run:
       shell: bash
    steps:
    - name: Print Runner Hostname
      run: hostname
      shell: bash
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Install unzip
      run: sudo apt-get update && sudo apt-get install -y unzip
    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_PRODUCT_VERSION }}
        cli_config_credentials_hostname: app.terraform.io
        terraform_wrapper: true
    - name: Setup `packer`
      uses: hashicorp/setup-packer@main
      id: setup
      with:
        version: ${{ env.PACKER_PRODUCT_VERSION }}
    

  terraform:
    runs-on: [self-hosted,terraform]   # ðŸ‘ˆ This ensures it runs on your self-hosted runner
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Install unzip
        run: sudo apt-get update && sudo apt-get install -y unzip    
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_PRODUCT_VERSION }}
          cli_config_credentials_hostname: app.terraform.io
          terraform_wrapper: true

      # ---------------- AWS ----------------
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # ---------------- Azure ----------------
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      # ---------------- Terraform Init ----------------
      - name: Terraform Init
        id: init
        shell: bash
        run: terraform init
        
      # ---------------- Terraform Plan ----------------
      - name: Terraform Plan
        id: plan
        shell: bash
        if: ${{ (steps.init.exit_code == 0) && (github.event.inputs.action == 'plan' ) }}
        run: terraform plan 


      # ---------------- Terraform Apply ----------------
      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply -auto-approve 

      # ---------------- Terraform Destroy ----------------
      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -auto-approve 
